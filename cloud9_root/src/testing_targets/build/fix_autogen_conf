#!/usr/bin/env python
#
# Copyright 2012 EPFL. All rights reserved.

"""Fixes a config.h file generated by autotools."""


__author__ = "stefan.bucur@epfl.ch (Stefan Bucur)"


import argparse
import re
import os


def_re = re.compile(r"^#define\s+(\w+)\s+(\d+)$")
undef_re = re.compile(r"^/\*\s+#undef\s+(\w+)\s+\*/$")

def_string = "#define %s 1\n"
undef_string = "/* #undef %s */\n"

def ParseSymbol(line):
  match = def_re.match(line)
  if match:
    return ("D", match.group(1), int(match.group(2)))
  match = undef_re.match(line)
  if match:
    return ("U", match.group(1))
  return None

def Main():
  parser = argparse.ArgumentParser(description="Fix config.h file.")
  parser.add_argument("config_file",
                      help="The name of the config.h file to parse.")
  parser.add_argument("-d", "--define", action="append",
                      help="Symbol to define.")
  parser.add_argument("-u", "--undef", action="append",
                      help="Symbol to undefine")

  args = parser.parse_args()

  define_set = set(args.define or [])
  undef_set = set(args.undef or [])

  output_lines = []
  with open(args.config_file, "r") as f:
    for input_line in f:
      symbol = ParseSymbol(input_line)
      if not symbol:
        output_lines.append(input_line)
        continue
      if symbol[0] == "D" and symbol[1] in undef_set:
        print "Undefining symbol '%s'" % symbol[1]
        output_lines.append(undef_string % symbol[1])
      elif symbol[0] == "U" and symbol[1] in define_set:
        print "Defining symbol '%s'" % symbol[1]
        output_lines.append(def_string % symbol[1])
      else:
        output_lines.append(input_line)

  tmp_file = "%s.tmp" % args.config_file
      
  with open(tmp_file, "w") as f:
    f.write("".join(output_lines))
  os.rename(tmp_file, args.config_file)

if __name__ == "__main__":
  Main()
